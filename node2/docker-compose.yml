version: '3.8'

services:
  zookeeper2:
    image: confluentinc/cp-zookeeper:latest
    restart: unless-stopped
    hostname: zookeeper2
    container_name: zookeeper2
    extra_hosts:
      - "datanode1:172.30.0.3"
      - "datanode2:172.30.0.5"
      - "datanode3:172.30.0.7"
    environment:
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_CLIENT_PORT: 22181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: datanode1:12888:3888;zookeeper2:22888:3888;datanode3:32888:3888
      ZOOKEEPER_MAX_CLIENT_CNXNS: 60
      ZOOKEEPER_DATA_DIR: /var/lib/zookeeper
      LOG_DIR: /var/log/zookeeper
    volumes:
      - /usr/share/zoneinfo/Asia/Seoul:/etc/localtime:ro
      - ./zookeeper-data/data:/var/lib/zookeeper/data
      - ./zookeeper-data/log:/var/lib/zookeeper/log
      - ./zookeeper-varlog:/var/log/zookeeper
    #network_mode: host
    networks:
      - kafka-cluster-net
    ports:
      - "22181:2181"
      - "22888:2888"
      - "23888:3888"

  kafka2:
    image: confluentinc/cp-kafka:latest
    restart: unless-stopped
    hostname: kafka2
    container_name: kafka2
    extra_hosts:
      - "datanode1:172.30.0.3"
      - "datanode2:172.30.0.5"
      - "datanode3:172.30.0.7"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092
      KAFKA_ZOOKEEPER_CONNECT: "datanode1:12181,zookeeper2:22181,datanode3:32181/hyo-kafka/01"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://172.30.0.6:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DELETE_TOPIC_ENABLE: "true" # 삭제 표시만 남는 것이 아닌 실제로 토픽을 삭제한다.
      KAFKA_ALLOW_AUTO_CREATE_TOPICS: "false" # 자동 토픽 생성 옵션인데, 불 필요한 토픽 생성을 방지할 수 있다.
      KAFKA_LOG4J_LOGGERS: "kafka.authorizer.logger=INFO"
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_DATA_DIR: /var/lib/kafka
      KAFKA_LOG_RETENTION_HOURS: 72 # 3일
      LOG_DIR: /var/log/kafka
    volumes:
      - /usr/share/zoneinfo/Asia/Seoul:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./kafka-data:/var/lib/kafka/data
      - ./kafka-varlog:/var/log/kafka
    depends_on:
      - zookeeper2
    #network_mode: host
    networks:
      - kafka-cluster-net
    ports:
      - "29092:9092"

networks:
  kafka-cluster-net:
    name: kafka-cluster-net
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16
